{"ast":null,"code":"var _jsxFileName = \"/Users/sxiaojian/NDH108PPIWeb/protein-interaction-site/src/components/ProteinNetwork.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Box, CircularProgress } from '@mui/material';\nimport { Network } from 'vis-network';\nimport { DataSet } from 'vis-data';\nimport { API_BASE_URL } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProteinNetwork({\n  onSelectProtein\n}) {\n  _s();\n  const networkRef = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    let network = null;\n    const container = networkRef.current;\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(`${API_BASE_URL}/api/interactions`);\n        if (!response.ok) throw new Error('Failed to fetch data');\n        const data = await response.json();\n\n        // 创建节点和边\n        const nodes = new DataSet();\n        const edges = new DataSet();\n        const addedNodes = new Set();\n        data.forEach(interaction => {\n          const {\n            protein1,\n            protein2,\n            score\n          } = interaction;\n          if (!addedNodes.has(protein1)) {\n            nodes.add({\n              id: protein1,\n              label: protein1\n            });\n            addedNodes.add(protein1);\n          }\n          if (!addedNodes.has(protein2)) {\n            nodes.add({\n              id: protein2,\n              label: protein2\n            });\n            addedNodes.add(protein2);\n          }\n          edges.add({\n            from: protein1,\n            to: protein2,\n            width: parseFloat(score) * 2,\n            color: parseFloat(score) === 1 ? '#ff0000' : '#999999'\n          });\n        });\n\n        // 配置网络选项\n        const options = {\n          nodes: {\n            shape: 'dot',\n            size: 16,\n            font: {\n              size: 12,\n              color: '#333333'\n            },\n            borderWidth: 2,\n            color: {\n              background: '#ffffff',\n              border: '#2B7CE9'\n            }\n          },\n          edges: {\n            smooth: {\n              type: 'continuous'\n            }\n          },\n          physics: {\n            stabilization: true,\n            barnesHut: {\n              gravitationalConstant: -80000,\n              springConstant: 0.001,\n              springLength: 200\n            }\n          },\n          interaction: {\n            hover: true,\n            tooltipDelay: 200\n          }\n        };\n\n        // 创建网络\n        network = new Network(container, {\n          nodes,\n          edges\n        }, options);\n\n        // 添加事件监听器\n        network.on('selectNode', params => {\n          if (params.nodes.length > 0) {\n            onSelectProtein(params.nodes[0]);\n          }\n        });\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n    return () => {\n      if (network) {\n        network.destroy();\n      }\n    };\n  }, [onSelectProtein]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      height: \"500px\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      height: \"500px\",\n      color: \"error.main\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    ref: networkRef,\n    sx: {\n      height: '500px',\n      border: '1px solid #ddd',\n      borderRadius: 1,\n      overflow: 'hidden'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n_s(ProteinNetwork, \"35rRxP+rgBXVf6jpw9Ke7eEQL54=\");\n_c = ProteinNetwork;\nexport default ProteinNetwork;\nvar _c;\n$RefreshReg$(_c, \"ProteinNetwork\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Box","CircularProgress","Network","DataSet","API_BASE_URL","jsxDEV","_jsxDEV","ProteinNetwork","onSelectProtein","_s","networkRef","loading","setLoading","error","setError","network","container","current","fetchData","response","fetch","ok","Error","data","json","nodes","edges","addedNodes","Set","forEach","interaction","protein1","protein2","score","has","add","id","label","from","to","width","parseFloat","color","options","shape","size","font","borderWidth","background","border","smooth","type","physics","stabilization","barnesHut","gravitationalConstant","springConstant","springLength","hover","tooltipDelay","on","params","length","err","message","destroy","display","justifyContent","alignItems","height","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","sx","borderRadius","overflow","_c","$RefreshReg$"],"sources":["/Users/sxiaojian/NDH108PPIWeb/protein-interaction-site/src/components/ProteinNetwork.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Box, CircularProgress } from '@mui/material';\nimport { Network } from 'vis-network';\nimport { DataSet } from 'vis-data';\nimport { API_BASE_URL } from '../config';\n\nfunction ProteinNetwork({ onSelectProtein }) {\n  const networkRef = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    let network = null;\n    const container = networkRef.current;\n\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(`${API_BASE_URL}/api/interactions`);\n        if (!response.ok) throw new Error('Failed to fetch data');\n        const data = await response.json();\n\n        // 创建节点和边\n        const nodes = new DataSet();\n        const edges = new DataSet();\n        const addedNodes = new Set();\n\n        data.forEach(interaction => {\n          const { protein1, protein2, score } = interaction;\n          \n          if (!addedNodes.has(protein1)) {\n            nodes.add({ id: protein1, label: protein1 });\n            addedNodes.add(protein1);\n          }\n          if (!addedNodes.has(protein2)) {\n            nodes.add({ id: protein2, label: protein2 });\n            addedNodes.add(protein2);\n          }\n\n          edges.add({\n            from: protein1,\n            to: protein2,\n            width: parseFloat(score) * 2,\n            color: parseFloat(score) === 1 ? '#ff0000' : '#999999'\n          });\n        });\n\n        // 配置网络选项\n        const options = {\n          nodes: {\n            shape: 'dot',\n            size: 16,\n            font: {\n              size: 12,\n              color: '#333333'\n            },\n            borderWidth: 2,\n            color: {\n              background: '#ffffff',\n              border: '#2B7CE9'\n            }\n          },\n          edges: {\n            smooth: {\n              type: 'continuous'\n            }\n          },\n          physics: {\n            stabilization: true,\n            barnesHut: {\n              gravitationalConstant: -80000,\n              springConstant: 0.001,\n              springLength: 200\n            }\n          },\n          interaction: {\n            hover: true,\n            tooltipDelay: 200\n          }\n        };\n\n        // 创建网络\n        network = new Network(container, { nodes, edges }, options);\n\n        // 添加事件监听器\n        network.on('selectNode', (params) => {\n          if (params.nodes.length > 0) {\n            onSelectProtein(params.nodes[0]);\n          }\n        });\n\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      if (network) {\n        network.destroy();\n      }\n    };\n  }, [onSelectProtein]);\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"500px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"500px\" color=\"error.main\">\n        Error: {error}\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      ref={networkRef}\n      sx={{\n        height: '500px',\n        border: '1px solid #ddd',\n        borderRadius: 1,\n        overflow: 'hidden'\n      }}\n    />\n  );\n}\n\nexport default ProteinNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}