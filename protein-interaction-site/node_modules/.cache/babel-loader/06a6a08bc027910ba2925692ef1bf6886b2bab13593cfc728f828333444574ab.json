{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import{Box,CircularProgress}from'@mui/material';import{Network}from'vis-network';import{DataSet}from'vis-data';import{API_BASE_URL}from'../config';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ProteinNetwork(_ref){let{onSelectProtein}=_ref;const containerRef=useRef(null);const networkRef=useRef(null);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);// 初始化网络\nconst initNetwork=(container,nodes,edges)=>{if(networkRef.current){networkRef.current.destroy();networkRef.current=null;}const options={nodes:{shape:'dot',size:16,font:{size:12,color:'#333333'},borderWidth:2,color:{background:'#ffffff',border:'#2B7CE9'}},edges:{smooth:{type:'continuous'}},physics:{stabilization:true,barnesHut:{gravitationalConstant:-80000,springConstant:0.001,springLength:200}},interaction:{hover:true,tooltipDelay:200}};const network=new Network(container,{nodes,edges},options);network.on('selectNode',params=>{if(params.nodes.length>0){onSelectProtein(params.nodes[0]);}});return network;};useEffect(()=>{const fetchData=async()=>{if(!containerRef.current)return;try{setLoading(true);setError(null);const response=await fetch(`${API_BASE_URL}/interactions`);if(!response.ok)throw new Error('Failed to fetch data');const data=await response.json();const nodes=new DataSet();const edges=new DataSet();const addedNodes=new Set();data.forEach(interaction=>{const{protein1,protein2,score}=interaction;if(!addedNodes.has(protein1)){nodes.add({id:protein1,label:protein1});addedNodes.add(protein1);}if(!addedNodes.has(protein2)){nodes.add({id:protein2,label:protein2});addedNodes.add(protein2);}edges.add({from:protein1,to:protein2,width:parseFloat(score)*2,color:parseFloat(score)===1?'#ff0000':'#999999'});});networkRef.current=initNetwork(containerRef.current,nodes,edges);}catch(err){setError(err.message);}finally{setLoading(false);}};fetchData();return()=>{if(networkRef.current){try{networkRef.current.destroy();networkRef.current=null;}catch(e){console.error('Error destroying network:',e);}}};},[onSelectProtein]);if(loading){return/*#__PURE__*/_jsx(Box,{display:\"flex\",justifyContent:\"center\",alignItems:\"center\",height:\"500px\",children:/*#__PURE__*/_jsx(CircularProgress,{})});}if(error){return/*#__PURE__*/_jsxs(Box,{display:\"flex\",justifyContent:\"center\",alignItems:\"center\",height:\"500px\",color:\"error.main\",children:[\"Error: \",error]});}return/*#__PURE__*/_jsx(Box,{ref:containerRef,sx:{height:'500px',border:'1px solid #ddd',borderRadius:1,overflow:'hidden'}});}export default ProteinNetwork;","map":{"version":3,"names":["React","useEffect","useRef","useState","Box","CircularProgress","Network","DataSet","API_BASE_URL","jsx","_jsx","jsxs","_jsxs","ProteinNetwork","_ref","onSelectProtein","containerRef","networkRef","loading","setLoading","error","setError","initNetwork","container","nodes","edges","current","destroy","options","shape","size","font","color","borderWidth","background","border","smooth","type","physics","stabilization","barnesHut","gravitationalConstant","springConstant","springLength","interaction","hover","tooltipDelay","network","on","params","length","fetchData","response","fetch","ok","Error","data","json","addedNodes","Set","forEach","protein1","protein2","score","has","add","id","label","from","to","width","parseFloat","err","message","e","console","display","justifyContent","alignItems","height","children","ref","sx","borderRadius","overflow"],"sources":["/Users/sxiaojian/NDH108PPIWeb/protein-interaction-site/src/components/ProteinNetwork.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Box, CircularProgress } from '@mui/material';\nimport { Network } from 'vis-network';\nimport { DataSet } from 'vis-data';\nimport { API_BASE_URL } from '../config';\n\nfunction ProteinNetwork({ onSelectProtein }) {\n  const containerRef = useRef(null);\n  const networkRef = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // 初始化网络\n  const initNetwork = (container, nodes, edges) => {\n    if (networkRef.current) {\n      networkRef.current.destroy();\n      networkRef.current = null;\n    }\n\n    const options = {\n      nodes: {\n        shape: 'dot',\n        size: 16,\n        font: {\n          size: 12,\n          color: '#333333'\n        },\n        borderWidth: 2,\n        color: {\n          background: '#ffffff',\n          border: '#2B7CE9'\n        }\n      },\n      edges: {\n        smooth: {\n          type: 'continuous'\n        }\n      },\n      physics: {\n        stabilization: true,\n        barnesHut: {\n          gravitationalConstant: -80000,\n          springConstant: 0.001,\n          springLength: 200\n        }\n      },\n      interaction: {\n        hover: true,\n        tooltipDelay: 200\n      }\n    };\n\n    const network = new Network(container, { nodes, edges }, options);\n    network.on('selectNode', (params) => {\n      if (params.nodes.length > 0) {\n        onSelectProtein(params.nodes[0]);\n      }\n    });\n\n    return network;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!containerRef.current) return;\n\n      try {\n        setLoading(true);\n        setError(null);\n\n        const response = await fetch(`${API_BASE_URL}/interactions`);\n        if (!response.ok) throw new Error('Failed to fetch data');\n        const data = await response.json();\n\n        const nodes = new DataSet();\n        const edges = new DataSet();\n        const addedNodes = new Set();\n\n        data.forEach(interaction => {\n          const { protein1, protein2, score } = interaction;\n          \n          if (!addedNodes.has(protein1)) {\n            nodes.add({ id: protein1, label: protein1 });\n            addedNodes.add(protein1);\n          }\n          if (!addedNodes.has(protein2)) {\n            nodes.add({ id: protein2, label: protein2 });\n            addedNodes.add(protein2);\n          }\n\n          edges.add({\n            from: protein1,\n            to: protein2,\n            width: parseFloat(score) * 2,\n            color: parseFloat(score) === 1 ? '#ff0000' : '#999999'\n          });\n        });\n\n        networkRef.current = initNetwork(containerRef.current, nodes, edges);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      if (networkRef.current) {\n        try {\n          networkRef.current.destroy();\n          networkRef.current = null;\n        } catch (e) {\n          console.error('Error destroying network:', e);\n        }\n      }\n    };\n  }, [onSelectProtein]);\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"500px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"500px\" color=\"error.main\">\n        Error: {error}\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      ref={containerRef}\n      sx={{\n        height: '500px',\n        border: '1px solid #ddd',\n        borderRadius: 1,\n        overflow: 'hidden'\n      }}\n    />\n  );\n}\n\nexport default ProteinNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}