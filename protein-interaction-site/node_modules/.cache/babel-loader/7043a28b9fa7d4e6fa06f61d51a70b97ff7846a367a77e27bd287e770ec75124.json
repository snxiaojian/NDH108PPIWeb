{"ast":null,"code":"var _jsxFileName = \"/Users/sxiaojian/NDH108PPIWeb/protein-interaction-site/src/components/ProteinNetwork.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Box, CircularProgress } from '@mui/material';\nimport { Network } from 'vis-network';\nimport { DataSet } from 'vis-data';\nimport { API_BASE_URL } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProteinNetwork({\n  onSelectProtein\n}) {\n  _s();\n  const containerRef = useRef(null);\n  const networkRef = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // 初始化网络\n  const initNetwork = (container, nodes, edges) => {\n    if (networkRef.current) {\n      networkRef.current.destroy();\n      networkRef.current = null;\n    }\n    const options = {\n      nodes: {\n        shape: 'dot',\n        size: 16,\n        font: {\n          size: 12,\n          color: '#333333'\n        },\n        borderWidth: 2,\n        color: {\n          background: '#ffffff',\n          border: '#2B7CE9'\n        }\n      },\n      edges: {\n        smooth: {\n          type: 'continuous'\n        }\n      },\n      physics: {\n        stabilization: true,\n        barnesHut: {\n          gravitationalConstant: -80000,\n          springConstant: 0.001,\n          springLength: 200\n        }\n      },\n      interaction: {\n        hover: true,\n        tooltipDelay: 200\n      }\n    };\n    const network = new Network(container, {\n      nodes,\n      edges\n    }, options);\n    network.on('selectNode', params => {\n      if (params.nodes.length > 0) {\n        onSelectProtein(params.nodes[0]);\n      }\n    });\n    return network;\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!containerRef.current) return;\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await fetch(`${API_BASE_URL}/interactions`);\n        if (!response.ok) throw new Error('Failed to fetch data');\n        const data = await response.json();\n        const nodes = new DataSet();\n        const edges = new DataSet();\n        const addedNodes = new Set();\n        data.forEach(interaction => {\n          const {\n            protein1,\n            protein2,\n            score\n          } = interaction;\n          if (!addedNodes.has(protein1)) {\n            nodes.add({\n              id: protein1,\n              label: protein1\n            });\n            addedNodes.add(protein1);\n          }\n          if (!addedNodes.has(protein2)) {\n            nodes.add({\n              id: protein2,\n              label: protein2\n            });\n            addedNodes.add(protein2);\n          }\n          edges.add({\n            from: protein1,\n            to: protein2,\n            width: parseFloat(score) * 2,\n            color: parseFloat(score) === 1 ? '#ff0000' : '#999999'\n          });\n        });\n        networkRef.current = initNetwork(containerRef.current, nodes, edges);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n    return () => {\n      if (networkRef.current) {\n        try {\n          networkRef.current.destroy();\n          networkRef.current = null;\n        } catch (e) {\n          console.error('Error destroying network:', e);\n        }\n      }\n    };\n  }, [onSelectProtein]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      height: \"500px\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      height: \"500px\",\n      color: \"error.main\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    ref: containerRef,\n    sx: {\n      height: '500px',\n      border: '1px solid #ddd',\n      borderRadius: 1,\n      overflow: 'hidden'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n}\n_s(ProteinNetwork, \"dQ8nElYce609oAWlEek5tnMKXBM=\");\n_c = ProteinNetwork;\nexport default ProteinNetwork;\nvar _c;\n$RefreshReg$(_c, \"ProteinNetwork\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Box","CircularProgress","Network","DataSet","API_BASE_URL","jsxDEV","_jsxDEV","ProteinNetwork","onSelectProtein","_s","containerRef","networkRef","loading","setLoading","error","setError","initNetwork","container","nodes","edges","current","destroy","options","shape","size","font","color","borderWidth","background","border","smooth","type","physics","stabilization","barnesHut","gravitationalConstant","springConstant","springLength","interaction","hover","tooltipDelay","network","on","params","length","fetchData","response","fetch","ok","Error","data","json","addedNodes","Set","forEach","protein1","protein2","score","has","add","id","label","from","to","width","parseFloat","err","message","e","console","display","justifyContent","alignItems","height","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","sx","borderRadius","overflow","_c","$RefreshReg$"],"sources":["/Users/sxiaojian/NDH108PPIWeb/protein-interaction-site/src/components/ProteinNetwork.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Box, CircularProgress } from '@mui/material';\nimport { Network } from 'vis-network';\nimport { DataSet } from 'vis-data';\nimport { API_BASE_URL } from '../config';\n\nfunction ProteinNetwork({ onSelectProtein }) {\n  const containerRef = useRef(null);\n  const networkRef = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // 初始化网络\n  const initNetwork = (container, nodes, edges) => {\n    if (networkRef.current) {\n      networkRef.current.destroy();\n      networkRef.current = null;\n    }\n\n    const options = {\n      nodes: {\n        shape: 'dot',\n        size: 16,\n        font: {\n          size: 12,\n          color: '#333333'\n        },\n        borderWidth: 2,\n        color: {\n          background: '#ffffff',\n          border: '#2B7CE9'\n        }\n      },\n      edges: {\n        smooth: {\n          type: 'continuous'\n        }\n      },\n      physics: {\n        stabilization: true,\n        barnesHut: {\n          gravitationalConstant: -80000,\n          springConstant: 0.001,\n          springLength: 200\n        }\n      },\n      interaction: {\n        hover: true,\n        tooltipDelay: 200\n      }\n    };\n\n    const network = new Network(container, { nodes, edges }, options);\n    network.on('selectNode', (params) => {\n      if (params.nodes.length > 0) {\n        onSelectProtein(params.nodes[0]);\n      }\n    });\n\n    return network;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!containerRef.current) return;\n\n      try {\n        setLoading(true);\n        setError(null);\n\n        const response = await fetch(`${API_BASE_URL}/interactions`);\n        if (!response.ok) throw new Error('Failed to fetch data');\n        const data = await response.json();\n\n        const nodes = new DataSet();\n        const edges = new DataSet();\n        const addedNodes = new Set();\n\n        data.forEach(interaction => {\n          const { protein1, protein2, score } = interaction;\n          \n          if (!addedNodes.has(protein1)) {\n            nodes.add({ id: protein1, label: protein1 });\n            addedNodes.add(protein1);\n          }\n          if (!addedNodes.has(protein2)) {\n            nodes.add({ id: protein2, label: protein2 });\n            addedNodes.add(protein2);\n          }\n\n          edges.add({\n            from: protein1,\n            to: protein2,\n            width: parseFloat(score) * 2,\n            color: parseFloat(score) === 1 ? '#ff0000' : '#999999'\n          });\n        });\n\n        networkRef.current = initNetwork(containerRef.current, nodes, edges);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      if (networkRef.current) {\n        try {\n          networkRef.current.destroy();\n          networkRef.current = null;\n        } catch (e) {\n          console.error('Error destroying network:', e);\n        }\n      }\n    };\n  }, [onSelectProtein]);\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"500px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"500px\" color=\"error.main\">\n        Error: {error}\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      ref={containerRef}\n      sx={{\n        height: '500px',\n        border: '1px solid #ddd',\n        borderRadius: 1,\n        overflow: 'hidden'\n      }}\n    />\n  );\n}\n\nexport default ProteinNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}