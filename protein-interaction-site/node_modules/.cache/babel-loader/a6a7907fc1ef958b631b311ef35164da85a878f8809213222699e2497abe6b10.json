{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import{Box,CircularProgress}from'@mui/material';import{Network}from'vis-network';import{DataSet}from'vis-data';import{API_BASE_URL}from'../config';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ProteinNetwork(_ref){let{onSelectProtein}=_ref;const networkRef=useRef(null);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);useEffect(()=>{let network=null;const container=networkRef.current;const fetchData=async()=>{try{setLoading(true);const response=await fetch(`${API_BASE_URL}/interactions`);if(!response.ok)throw new Error('Failed to fetch data');const data=await response.json();// 创建节点和边\nconst nodes=new DataSet();const edges=new DataSet();const addedNodes=new Set();data.forEach(interaction=>{const{protein1,protein2,score}=interaction;if(!addedNodes.has(protein1)){nodes.add({id:protein1,label:protein1});addedNodes.add(protein1);}if(!addedNodes.has(protein2)){nodes.add({id:protein2,label:protein2});addedNodes.add(protein2);}edges.add({from:protein1,to:protein2,width:parseFloat(score)*2,color:parseFloat(score)===1?'#ff0000':'#999999'});});// 配置网络选项\nconst options={nodes:{shape:'dot',size:16,font:{size:12,color:'#333333'},borderWidth:2,color:{background:'#ffffff',border:'#2B7CE9'}},edges:{smooth:{type:'continuous'}},physics:{stabilization:true,barnesHut:{gravitationalConstant:-80000,springConstant:0.001,springLength:200}},interaction:{hover:true,tooltipDelay:200}};// 创建网络\nnetwork=new Network(container,{nodes,edges},options);// 添加事件监听器\nnetwork.on('selectNode',params=>{if(params.nodes.length>0){onSelectProtein(params.nodes[0]);}});}catch(err){setError(err.message);}finally{setLoading(false);}};fetchData();return()=>{if(network){network.destroy();}};},[onSelectProtein]);if(loading){return/*#__PURE__*/_jsx(Box,{display:\"flex\",justifyContent:\"center\",alignItems:\"center\",height:\"500px\",children:/*#__PURE__*/_jsx(CircularProgress,{})});}if(error){return/*#__PURE__*/_jsxs(Box,{display:\"flex\",justifyContent:\"center\",alignItems:\"center\",height:\"500px\",color:\"error.main\",children:[\"Error: \",error]});}return/*#__PURE__*/_jsx(Box,{ref:networkRef,sx:{height:'500px',border:'1px solid #ddd',borderRadius:1,overflow:'hidden'}});}export default ProteinNetwork;","map":{"version":3,"names":["React","useEffect","useRef","useState","Box","CircularProgress","Network","DataSet","API_BASE_URL","jsx","_jsx","jsxs","_jsxs","ProteinNetwork","_ref","onSelectProtein","networkRef","loading","setLoading","error","setError","network","container","current","fetchData","response","fetch","ok","Error","data","json","nodes","edges","addedNodes","Set","forEach","interaction","protein1","protein2","score","has","add","id","label","from","to","width","parseFloat","color","options","shape","size","font","borderWidth","background","border","smooth","type","physics","stabilization","barnesHut","gravitationalConstant","springConstant","springLength","hover","tooltipDelay","on","params","length","err","message","destroy","display","justifyContent","alignItems","height","children","ref","sx","borderRadius","overflow"],"sources":["/Users/sxiaojian/NDH108PPIWeb/protein-interaction-site/src/components/ProteinNetwork.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Box, CircularProgress } from '@mui/material';\nimport { Network } from 'vis-network';\nimport { DataSet } from 'vis-data';\nimport { API_BASE_URL } from '../config';\n\nfunction ProteinNetwork({ onSelectProtein }) {\n  const networkRef = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    let network = null;\n    const container = networkRef.current;\n\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(`${API_BASE_URL}/interactions`);\n        if (!response.ok) throw new Error('Failed to fetch data');\n        const data = await response.json();\n\n        // 创建节点和边\n        const nodes = new DataSet();\n        const edges = new DataSet();\n        const addedNodes = new Set();\n\n        data.forEach(interaction => {\n          const { protein1, protein2, score } = interaction;\n          \n          if (!addedNodes.has(protein1)) {\n            nodes.add({ id: protein1, label: protein1 });\n            addedNodes.add(protein1);\n          }\n          if (!addedNodes.has(protein2)) {\n            nodes.add({ id: protein2, label: protein2 });\n            addedNodes.add(protein2);\n          }\n\n          edges.add({\n            from: protein1,\n            to: protein2,\n            width: parseFloat(score) * 2,\n            color: parseFloat(score) === 1 ? '#ff0000' : '#999999'\n          });\n        });\n\n        // 配置网络选项\n        const options = {\n          nodes: {\n            shape: 'dot',\n            size: 16,\n            font: {\n              size: 12,\n              color: '#333333'\n            },\n            borderWidth: 2,\n            color: {\n              background: '#ffffff',\n              border: '#2B7CE9'\n            }\n          },\n          edges: {\n            smooth: {\n              type: 'continuous'\n            }\n          },\n          physics: {\n            stabilization: true,\n            barnesHut: {\n              gravitationalConstant: -80000,\n              springConstant: 0.001,\n              springLength: 200\n            }\n          },\n          interaction: {\n            hover: true,\n            tooltipDelay: 200\n          }\n        };\n\n        // 创建网络\n        network = new Network(container, { nodes, edges }, options);\n\n        // 添加事件监听器\n        network.on('selectNode', (params) => {\n          if (params.nodes.length > 0) {\n            onSelectProtein(params.nodes[0]);\n          }\n        });\n\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      if (network) {\n        network.destroy();\n      }\n    };\n  }, [onSelectProtein]);\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"500px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"500px\" color=\"error.main\">\n        Error: {error}\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      ref={networkRef}\n      sx={{\n        height: '500px',\n        border: '1px solid #ddd',\n        borderRadius: 1,\n        overflow: 'hidden'\n      }}\n    />\n  );\n}\n\nexport default ProteinNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}