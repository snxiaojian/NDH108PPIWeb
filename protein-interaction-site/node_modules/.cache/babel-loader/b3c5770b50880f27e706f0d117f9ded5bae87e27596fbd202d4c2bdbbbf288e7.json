{"ast":null,"code":"var _jsxFileName = \"/Users/sxiaojian/NDH108PPIWeb/protein-interaction-site/src/components/ProteinNetwork.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Box, CircularProgress } from '@mui/material';\nimport { Network } from 'vis-network';\nimport { DataSet } from 'vis-data';\nimport { API_BASE_URL } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProteinNetwork({\n  onSelectProtein\n}) {\n  _s();\n  const containerRef = useRef(null);\n  const networkRef = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState(null);\n\n  // 获取数据\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await fetch(`${API_BASE_URL}/interactions`);\n        if (!response.ok) throw new Error('Failed to fetch data');\n        const result = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // 初始化网络\n  useEffect(() => {\n    if (!data || !containerRef.current) return;\n    const nodes = new DataSet();\n    const edges = new DataSet();\n    const addedNodes = new Set();\n    data.forEach(interaction => {\n      const {\n        protein1,\n        protein2,\n        score\n      } = interaction;\n      if (!addedNodes.has(protein1)) {\n        nodes.add({\n          id: protein1,\n          label: protein1\n        });\n        addedNodes.add(protein1);\n      }\n      if (!addedNodes.has(protein2)) {\n        nodes.add({\n          id: protein2,\n          label: protein2\n        });\n        addedNodes.add(protein2);\n      }\n      edges.add({\n        from: protein1,\n        to: protein2,\n        width: parseFloat(score) * 2,\n        color: parseFloat(score) === 1 ? '#ff0000' : '#999999'\n      });\n    });\n    const options = {\n      nodes: {\n        shape: 'dot',\n        size: 16,\n        font: {\n          size: 12,\n          color: '#333333'\n        },\n        borderWidth: 2,\n        color: {\n          background: '#ffffff',\n          border: '#2B7CE9'\n        }\n      },\n      edges: {\n        smooth: {\n          type: 'continuous'\n        }\n      },\n      physics: {\n        stabilization: true,\n        barnesHut: {\n          gravitationalConstant: -80000,\n          springConstant: 0.001,\n          springLength: 200\n        }\n      },\n      interaction: {\n        hover: true,\n        tooltipDelay: 200\n      }\n    };\n\n    // 清理旧的网络实例\n    if (networkRef.current) {\n      networkRef.current.destroy();\n      networkRef.current = null;\n    }\n\n    // 创建新的网络实例\n    const network = new Network(containerRef.current, {\n      nodes,\n      edges\n    }, options);\n\n    // 添加事件监听器\n    network.on('selectNode', params => {\n      if (params.nodes.length > 0) {\n        onSelectProtein(params.nodes[0]);\n      }\n    });\n    networkRef.current = network;\n\n    // 清理函数\n    return () => {\n      if (networkRef.current) {\n        try {\n          networkRef.current.destroy();\n          networkRef.current = null;\n        } catch (e) {\n          console.error('Error destroying network:', e);\n        }\n      }\n    };\n  }, [data, onSelectProtein]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      height: \"500px\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      height: \"500px\",\n      color: \"error.main\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    ref: containerRef,\n    sx: {\n      height: '500px',\n      border: '1px solid #ddd',\n      borderRadius: 1,\n      overflow: 'hidden'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n_s(ProteinNetwork, \"ynJwsf3WO/zfg5cJoZP5MepveJ0=\");\n_c = ProteinNetwork;\nexport default ProteinNetwork;\nvar _c;\n$RefreshReg$(_c, \"ProteinNetwork\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Box","CircularProgress","Network","DataSet","API_BASE_URL","jsxDEV","_jsxDEV","ProteinNetwork","onSelectProtein","_s","containerRef","networkRef","loading","setLoading","error","setError","data","setData","fetchData","response","fetch","ok","Error","result","json","err","message","current","nodes","edges","addedNodes","Set","forEach","interaction","protein1","protein2","score","has","add","id","label","from","to","width","parseFloat","color","options","shape","size","font","borderWidth","background","border","smooth","type","physics","stabilization","barnesHut","gravitationalConstant","springConstant","springLength","hover","tooltipDelay","destroy","network","on","params","length","e","console","display","justifyContent","alignItems","height","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","sx","borderRadius","overflow","_c","$RefreshReg$"],"sources":["/Users/sxiaojian/NDH108PPIWeb/protein-interaction-site/src/components/ProteinNetwork.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Box, CircularProgress } from '@mui/material';\nimport { Network } from 'vis-network';\nimport { DataSet } from 'vis-data';\nimport { API_BASE_URL } from '../config';\n\nfunction ProteinNetwork({ onSelectProtein }) {\n  const containerRef = useRef(null);\n  const networkRef = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState(null);\n\n  // 获取数据\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const response = await fetch(`${API_BASE_URL}/interactions`);\n        if (!response.ok) throw new Error('Failed to fetch data');\n        const result = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // 初始化网络\n  useEffect(() => {\n    if (!data || !containerRef.current) return;\n\n    const nodes = new DataSet();\n    const edges = new DataSet();\n    const addedNodes = new Set();\n\n    data.forEach(interaction => {\n      const { protein1, protein2, score } = interaction;\n      \n      if (!addedNodes.has(protein1)) {\n        nodes.add({ id: protein1, label: protein1 });\n        addedNodes.add(protein1);\n      }\n      if (!addedNodes.has(protein2)) {\n        nodes.add({ id: protein2, label: protein2 });\n        addedNodes.add(protein2);\n      }\n\n      edges.add({\n        from: protein1,\n        to: protein2,\n        width: parseFloat(score) * 2,\n        color: parseFloat(score) === 1 ? '#ff0000' : '#999999'\n      });\n    });\n\n    const options = {\n      nodes: {\n        shape: 'dot',\n        size: 16,\n        font: {\n          size: 12,\n          color: '#333333'\n        },\n        borderWidth: 2,\n        color: {\n          background: '#ffffff',\n          border: '#2B7CE9'\n        }\n      },\n      edges: {\n        smooth: {\n          type: 'continuous'\n        }\n      },\n      physics: {\n        stabilization: true,\n        barnesHut: {\n          gravitationalConstant: -80000,\n          springConstant: 0.001,\n          springLength: 200\n        }\n      },\n      interaction: {\n        hover: true,\n        tooltipDelay: 200\n      }\n    };\n\n    // 清理旧的网络实例\n    if (networkRef.current) {\n      networkRef.current.destroy();\n      networkRef.current = null;\n    }\n\n    // 创建新的网络实例\n    const network = new Network(containerRef.current, { nodes, edges }, options);\n    \n    // 添加事件监听器\n    network.on('selectNode', (params) => {\n      if (params.nodes.length > 0) {\n        onSelectProtein(params.nodes[0]);\n      }\n    });\n\n    networkRef.current = network;\n\n    // 清理函数\n    return () => {\n      if (networkRef.current) {\n        try {\n          networkRef.current.destroy();\n          networkRef.current = null;\n        } catch (e) {\n          console.error('Error destroying network:', e);\n        }\n      }\n    };\n  }, [data, onSelectProtein]);\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"500px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"500px\" color=\"error.main\">\n        Error: {error}\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      ref={containerRef}\n      sx={{\n        height: '500px',\n        border: '1px solid #ddd',\n        borderRadius: 1,\n        overflow: 'hidden'\n      }}\n    />\n  );\n}\n\nexport default ProteinNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}